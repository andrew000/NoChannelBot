from sqlite3 import IntegrityError

import aiosqlite
from aiogram.types import Message, ChatType, ParseMode
from aiogram.utils.exceptions import ChatNotFound, TelegramAPIError
from aiogram.utils.markdown import hcode

from config import dp, CHANNEL_BOT_ID, DB_URL


async def _validate_cmd(msg: Message, command: str) -> int:
    """
    Return `sender_chat_id: int` if validation is OK, else return `0`

    P.S. I don't want use `raise` and `try: except:` statements :)
    """
    if msg.chat.type != ChatType.SUPERGROUP:
        await msg.reply("üî¥ –ö–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö")
        return 0

    if msg.reply_to_message and msg.reply_to_message.sender_chat:
        if msg.reply_to_message.from_user.id != CHANNEL_BOT_ID:
            await msg.reply("üî¥ –ö–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞ –∫–∞–Ω–∞–ª–æ–≤")
            return 0

        else:
            sender_chat_id = msg.reply_to_message.sender_chat.id

    elif sender_chat_id := msg.get_args().split(" ", maxsplit=1)[0]:
        if sender_chat_id.replace('-', '', 1).isdecimal():
            sender_chat_id = int(sender_chat_id)

        else:
            await msg.reply("üî¥ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
            return 0

        try:
            await msg.bot.get_chat(sender_chat_id)

        except ChatNotFound:
            await msg.reply("üî¥ –¢–∞–∫–æ–≥–æ —á–∞—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –±–æ—Ç –Ω–∏ —Ä–∞–∑—É –Ω–µ –≤—Å—Ç—Ä–µ—á–∞–ª—Å—è —Å —Ç–∞–∫–æ–≤—ã–º")
            return 0

    else:
        await msg.reply("üíÅ‚Äç‚ôÇÔ∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ —É–∫–∞–∑–∞—Ç—å –µ–≥–æ ID.\n"
                        "\n"
                        "–ï—Å–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ ‚Äî –±–æ—Ç –¥–æ–±–∞–≤–∏—Ç –∏–ª–∏ —É–¥–∞–ª–∏—Ç –µ–≥–æ –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ "
                        f"–æ—Ç –∫–æ–º–∞–Ω–¥—ã ({hcode('/whitelist')} | {hcode('/blacklist')}).\n"
                        "\n"
                        "–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å ID –∫–∞–Ω–∞–ª–∞:\n"
                        f"{hcode(f'/{command} channel_id')}\n"
                        "\n"
                        f"–ì–¥–µ {hcode('channel_id')} —ç—Ç–æ —Ü–∏—Ñ—Ä–∞, —Ç–æ –µ—Å—Ç—å ID –∫–∞–Ω–∞–ª–∞.",
                        parse_mode=ParseMode.HTML)
        return 0

    return sender_chat_id


@dp.throttled(rate=3)
async def cmd_whitelist(msg: Message):
    if (sender_chat_id := await _validate_cmd(msg, "whitelist")) == 0:
        return

    async with aiosqlite.connect(DB_URL) as db:
        try:
            await db.execute("INSERT INTO whitelist (chat_id, sender_chat_id) VALUES (?, ?)",
                             (msg.chat.id, sender_chat_id))
            await db.commit()

            await msg.chat.unban_sender_chat(sender_chat_id)

        except IntegrityError:
            await msg.reply(f"üü° –ö–∞–Ω–∞–ª {hcode(sender_chat_id)} —É–∂–µ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ",
                            parse_mode=ParseMode.HTML)

        except TelegramAPIError:
            await msg.reply(f"üü° –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –±–æ—Ç –Ω–µ —Å–º–æ–≥ —Ä–∞–∑–±–∞–Ω–∏—Ç—å –∫–∞–Ω–∞–ª.\n"
                            f"\n"
                            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ—Å—Ç—å –ª–∏ —É –±–æ—Ç–∞ –Ω—É–∂–Ω—ã–µ –ø—Ä–∞–≤–∞")

        except Exception as exc:
            print(cmd_whitelist.__name__, exc, type(exc).mro())

        else:
            await msg.reply(f"üü¢ –ö–∞–Ω–∞–ª {hcode(sender_chat_id)} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ —á–∞—Ç–∞",
                            parse_mode=ParseMode.HTML)


@dp.throttled(rate=3)
async def cmd_blacklist(msg: Message):
    if (sender_chat_id := await _validate_cmd(msg, "blacklist")) == 0:
        return

    async with aiosqlite.connect(DB_URL) as db:
        await db.execute("DELETE FROM whitelist WHERE chat_id = ? AND sender_chat_id = ?",
                         (msg.chat.id, sender_chat_id))
        await db.commit()

    try:
        await msg.chat.ban_sender_chat(sender_chat_id)
        await msg.reply(f"üü¢ –ö–∞–Ω–∞–ª {hcode(sender_chat_id)} —É–¥–∞–ª—ë–Ω –∏—Ö –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–∞",
                        parse_mode=ParseMode.HTML)

    except TelegramAPIError:
        await msg.reply(f"üü° –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –±–æ—Ç –Ω–µ —Å–º–æ–≥ –∑–∞–±–∞–Ω–∏—Ç—å –∫–∞–Ω–∞–ª.\n"
                        f"\n"
                        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ—Å—Ç—å –ª–∏ —É –±–æ—Ç–∞ –Ω—É–∂–Ω—ã–µ –ø—Ä–∞–≤–∞")

    except Exception as exc:
        print(cmd_blacklist.__name__, exc, type(exc).mro())
